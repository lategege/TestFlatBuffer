// automatically generated by the FlatBuffers compiler, do not modify

package flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FDebrisInfo extends Table {
  public static FDebrisInfo getRootAsFDebrisInfo(ByteBuffer _bb) { return getRootAsFDebrisInfo(_bb, new FDebrisInfo()); }
  public static FDebrisInfo getRootAsFDebrisInfo(ByteBuffer _bb, FDebrisInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FDebrisInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FDebris debrisList(int j) { return debrisList(new FDebris(), j); }
  public FDebris debrisList(FDebris obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int debrisListLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public String debrisHelp() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer debrisHelpAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }

  public static int createFDebrisInfo(FlatBufferBuilder builder,
      int debrisListOffset,
      int debrisHelpOffset) {
    builder.startObject(2);
    FDebrisInfo.addDebrisHelp(builder, debrisHelpOffset);
    FDebrisInfo.addDebrisList(builder, debrisListOffset);
    return FDebrisInfo.endFDebrisInfo(builder);
  }

  public static void startFDebrisInfo(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addDebrisList(FlatBufferBuilder builder, int debrisListOffset) { builder.addOffset(0, debrisListOffset, 0); }
  public static int createDebrisListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDebrisListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDebrisHelp(FlatBufferBuilder builder, int debrisHelpOffset) { builder.addOffset(1, debrisHelpOffset, 0); }
  public static int endFDebrisInfo(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

